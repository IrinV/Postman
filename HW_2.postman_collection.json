{
	"info": {
		"_postman_id": "c50037d7-dad4-4005-9db0-0092759b154c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21579226"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//HW_2 Postman",
							"//http://162.55.220.72:5005/first",
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Проверить, что в body приходит правильный string.",
							"//-якщо знаємо конкретно що прийде",
							"pm.test(\"Body is string\", function (){",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\")",
							"});",
							"",
							"//якщо не знаєш кoнкретної відповіді",
							"let resp = pm.response.text ();",
							"",
							"tests[\"stringoviy\"] = typeof resp == \"string\"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"///http://162.55.220.72:5005/user_info_3",
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"",
							"let pars_resp = pm.response.json ()",
							"console.log (\"Parsing response\", pars_resp);",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"console.log(\"Name from response\", pars_resp.name)",
							"",
							"pm.test(\"Test_name_by_hand\", function (){",
							"    pm.expect (pars_resp.name).to.equal(\"Ren\")",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Test_age_by_hand\", function (){",
							"    pm.expect(+pars_resp.age).to.equal(30)",
							"});",
							"//или",
							"pm.test(\"Test_age_by_hand\", function (){",
							"    pm.expect(Number(pars_resp.age)).to.equal(30)",
							"});",
							"//или",
							"pm.test(\"Test_age_by_hand\", function (){",
							"    pm.expect(pars_resp.age).to.equal(\"30\")",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Test_salary_by_hand\", function(){",
							"    pm.expect(pars_resp.salary).to.eql(1000)",
							"});",
							"",
							"//7. Спарсить request.",
							"let Pparsing_request = request.data",
							"//////что храниться в реквесте",
							"console.log (\"парсингреквест\", Pparsing_request);",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Test_name_req\", function (){",
							"    pm.expect (pars_resp.name).to.equal(Pparsing_request.name)",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Test_age_req\", function (){",
							"    pm.expect (pars_resp.age).to.equal(Pparsing_request.age)",
							"});",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Test_age_req\", function (){",
							"    pm.expect (pars_resp.salary).to.equal(+Pparsing_request.salary)",
							"});",
							"",
							"////11. Вывести в консоль параметр family из response.",
							"console.log(\"vivesti_info_family\", pars_resp.family);",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Salary_4x\", function (){",
							"    pm.expect(pars_resp.family.u_salary_1_5_year).to.eql(+Pparsing_request.salary*4)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ren",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Работа с масивами ",
							"//1. Отправить запрос. ",
							"",
							"//2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"let spars_response = pm.response.json()",
							"console.log (\"парсинг респонс баді\", spars_response);",
							"",
							"//4. Спарсить request.",
							"let spars_req = pm.request.url.query.all()",
							"console.log(\"парсинг реквесту\", spars_req);",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name is = name from request\", function (){",
							"    pm.expect (spars_req[1].value).to.eql(spars_response.name)",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age is = age from request\", function (){",
							"    pm.expect (spars_req[0].value).to.eql(spars_response.age)",
							"});",
							"//или",
							"let req_AGE = pm.request.url.query.get(\"age\")",
							"// проверка выводим в консоль - console.log (req_AGE)",
							"pm.test(\"2 age is = age from request\", function(){",
							"    pm.expect (req_AGE).to.eql(spars_response.age)",
							"});",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary is = salary from request\", function (){",
							"    pm.expect (+spars_req[2].value).to.eql(spars_response.salary)",
							"});",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"console.log (\"vivesty s otveta family\", spars_response.family)",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"dog has name\", function(){",
							"    pm.expect (spars_response.family.pets.dog).to.have.property(\"name\")",
							"});",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog has age\", function(){",
							"    pm.expect (spars_response.family.pets.dog).to.have.property(\"age\")",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Dog's name Luky\", function(){",
							"    pm.expect (spars_response.family.pets.dog.name).to.eql(\"Luky\")",
							"});",
							"//или если часть только знаешь названия",
							"pm.test(\"Dog's name Luky2\", function(){",
							"    pm.expect (spars_response.family.pets.dog.name).to.include(\"Lu\")",
							"});",
							"//или еще вариант",
							"tests[\"Dog's name Luky3\"]= spars_response.family.pets.dog.name == \"Luky\"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Dog age is 4\", function(){",
							"    pm.expect (spars_response.family.pets.dog.age).to.eql(4)",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Iren",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3\n?age=30&name=Irin&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3\n"
					],
					"query": [
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "name",
							"value": "Irin"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"let spars_resp = pm.response.json();",
							"console.log (\"RESPONSE\", spars_resp);",
							"//4. Спарсить request.",
							"let spars_req = pm.request.url.query.all();",
							"console.log (\"REQUEST\", spars_req);",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test (\"Name ravno\", function (){",
							"    pm.expect (spars_resp.name).to.eql(spars_req[1].value)",
							"});",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test (\"Age ravno\", function(){",
							"    pm.expect (spars_resp.age).to.eql(+spars_req[0].value)",
							"});",
							"//7. Вывести в консоль параметр salary из request.",
							"console.log (\"Salary\", spars_req[2].value);",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log (\"Salary 0\", spars_resp.salary[0]);",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log (\"Salary 1\", spars_resp.salary[1]);",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log (\"Salary 2\", spars_resp.salary[2]);",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Salary resp0 = Salary req\", function(){",
							"    pm.expect(+spars_resp.salary[0]).to.eql (+spars_req[2].value)",
							"});",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Salary resp1 = Salary req2\", function(){",
							"    pm.expect(+spars_resp.salary[1]).to.eql (spars_req[2].value*2)",
							"});",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test (\"Salary resp2 = Salary req3\", function(){",
							"    pm.expect(+spars_resp.salary[2]).to.eql(spars_req[2].value*3)",
							"});",
							"//15. Создать в окружении переменную name",
							"pm.environment.set(\"name\");",
							"//16. Создать в окружении переменную age",
							"pm.environment.set(\"age\");",
							"//или создаем в самой вкладке енвайормент",
							"//17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\");",
							"//18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Ren\");",
							"//19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", \"30\");",
							"//20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", \"1000\");",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Iren",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=30&name=Irin&salary=2500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "name",
							"value": "Irin"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set (\"url\", \"http://162.55.220.72:5005/\");",
							"",
							"//1. Вставить параметр salary из окружения в request",
							"//2. Вставить параметр age из окружения в age",
							"//3. Вставить параметр name из окружения в name",
							"//4. Отправить запрос.",
							"//вручную прописали",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//. Спарсить response body в json.",
							"let sparsenyi_resp = pm.response.json();",
							"console.log (\"Response\", sparsenyi_resp);",
							"//7. Спарсить request.",
							"let spasparsenyi_req = request.data;",
							"console.log (\"Request\", spasparsenyi_req);",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Resp start_qa_salary\", function(){",
							"    pm.expect(sparsenyi_resp).to.have.property(\"start_qa_salary\")",
							"});",
							"//. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Resp qa_salary_after_6_months\", function(){",
							"    pm.expect(sparsenyi_resp).to.have.property(\"qa_salary_after_6_months\")",
							"});",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Resp qa_salary_after_12_months\", function(){",
							"    pm.expect(sparsenyi_resp).to.have.property(\"qa_salary_after_12_months\")",
							"});",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Resp qa_salary_after_1.5_year\", function(){",
							"    pm.expect(sparsenyi_resp).to.have.property(\"qa_salary_after_1.5_year\")",
							"});",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Resp qa_salary_after_3.5_years\", function(){",
							"    pm.expect(sparsenyi_resp).to.have.property(\"qa_salary_after_3.5_years\")",
							"});",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"Resp person\", function(){",
							"    pm.expect(sparsenyi_resp).to.have.property(\"person\")",
							"});",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test (\"start_qa_salary = req salary\", function(){",
							"    pm.expect(sparsenyi_resp.start_qa_salary).to.eql(+spasparsenyi_req.salary)",
							"});",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test (\"qa_salary_after_6_months = req salary\", function(){",
							"    pm.expect(sparsenyi_resp.qa_salary_after_6_months).to.eql(spasparsenyi_req.salary*2)",
							"});",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test (\"qa_salary_after_12_months = req salary\", function(){",
							"    pm.expect(sparsenyi_resp.qa_salary_after_12_months).to.eql(spasparsenyi_req.salary*2.7)",
							"});",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test (\"qa_salary_after_1.5_year  = req salary\", function(){",
							"   pm.expect(sparsenyi_resp[\"qa_salary_after_1.5_year\"]).to.eql(spasparsenyi_req.salary*3.3)",
							"});",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test (\"qa_salary_after_3.5_years  = req salary\", function(){",
							"   pm.expect(sparsenyi_resp[\"qa_salary_after_3.5_years\"]).to.eql(spasparsenyi_req.salary*3.8)",
							"});",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test (\"person1\", function(){",
							"    pm.expect(sparsenyi_resp.person.u_name[1]).to.eql(+spasparsenyi_req.salary)",
							"});",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test (\"age\", function(){",
							"    pm.expect(sparsenyi_resp.person.u_age).to.eql(+spasparsenyi_req.age)",
							"});",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test (\"u_salary_5_years\", function(){",
							"    pm.expect(sparsenyi_resp.person.u_salary_5_years).to.eql(+spasparsenyi_req.salary*4.2)",
							"});",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Ren",
							"disabled": true
						},
						{
							"key": "age",
							"value": "30",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}